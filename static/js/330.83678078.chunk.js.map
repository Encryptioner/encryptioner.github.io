{"version":3,"file":"static/js/330.83678078.chunk.js","mappings":"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","sources":["shared/navbar/logo-type/LogoType.tsx","shared/color-mode-button/ColorModeButton.tsx","shared/navbar/drawer/Drawer.tsx","shared/navbar/Navbar.tsx","shared/socials/Socials.tsx","utils/Functions.ts"],"sourcesContent":["import { FC } from \"react\";\n\nimport { Box, Text, useBreakpointValue } from \"@chakra-ui/react\";\n\ninterface Props {\n    info: {\n        mobile: string;\n        desktop: string;\n        role: string;\n    };\n}\n\nexport const LogoType: FC<Props> = ({ info }) => {\n    const variantSignature = useBreakpointValue({ base: info.mobile, md: info.desktop });\n\n\n    return (\n        <Box transition=\"all 0.2s ease-in-out\" _hover={{ cursor: \"pointer\", color: \"primary.600\" }}>\n            <Text fontSize={{ base: \"3xl\", md: \"4xl\" }} lineHeight=\"1\" fontFamily=\"Signature\" mb=\"-2\">\n                {variantSignature}\n            </Text>\n            {info.role.length > 0 &&\n                <Text as='i' fontSize={{ base: \"xs\", md: \"sm\" }}>\n                    {info.role}\n                </Text>\n            }\n        </Box>\n    );\n};\n","import { FC } from \"react\";\n\nimport { HStack, IconButton, StyleProps, useColorMode, useColorModeValue } from \"@chakra-ui/react\";\n\nimport { MoonIcon, SunIcon } from \"utils/Icons\";\n\nexport const ColorModeButton: FC<StyleProps> = (props) => {\n    const color = useColorModeValue(\"gray.800\", \"white\");\n    const { colorMode, toggleColorMode } = useColorMode();\n\n    return (\n        <HStack {...props}>\n            <IconButton\n                aria-label=\"appearance\"\n                bg=\"transparent\"\n                color={color}\n                fontSize=\"lg\"\n                _hover={{ color: \"primary.500\" }}\n                _active={{ bg: \"transparent\" }}\n                icon={colorMode === \"light\" ? <MoonIcon /> : <SunIcon />}\n                variant=\"ghost\"\n                size=\"xs\"\n                onClick={() => {\n                    toggleColorMode();\n                    window.scrollBy(0, 1);\n                    window.scrollBy(0, -1);\n                }}\n                w=\"32px\"\n                h=\"32px\"\n            />\n        </HStack>\n    );\n};\n","import { FC, useRef } from \"react\";\n\nimport {\n    Box,\n    Button,\n    Drawer,\n    DrawerBody,\n    DrawerHeader,\n    DrawerOverlay,\n    DrawerContent,\n    DrawerCloseButton,\n    useDisclosure,\n    IconButton,\n    StyleProps,\n    Flex,\n    VStack,\n    useColorModeValue,\n} from \"@chakra-ui/react\";\n\nimport { ColorModeButton } from \"shared/color-mode-button/ColorModeButton\";\nimport { AboutPageId, SlidersPageId, WorkPageId } from \"utils/useScroll\";\nimport { MenuIcon } from \"utils/Icons\";\nimport { Socials } from \"shared/socials/Socials\";\nimport { onResumeOpen } from \"utils/Functions\";\n\ninterface Props extends StyleProps {\n    onSectionClick: (section: string) => void;\n    currentPage: string;\n}\n\nexport const MenuDrawer: FC<Props> = ({ onSectionClick, currentPage, ...props }) => {\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    const btnRef = useRef<any>(null);\n    const navItemColor = useColorModeValue(\"gray.800\", \"white\");\n\n    return (\n        <Box {...props}>\n            <Button\n                as={IconButton}\n                variant=\"icon\"\n                ref={btnRef}\n                onClick={onOpen}\n                aria-label=\"open drawer\"\n                fontSize=\"lg\"\n                color=\"primary.500\"\n                icon={<MenuIcon />}\n                px=\"0\"\n            />\n            <Drawer isOpen={isOpen} placement=\"right\" onClose={onClose} autoFocus={false}>\n                <DrawerOverlay />\n                <DrawerContent>\n                    <DrawerHeader px=\"4\">\n                        <Flex justifyContent=\"space-between\">\n                            <ColorModeButton />\n                            <DrawerCloseButton position=\"relative\" top=\"0\" right=\"0\" />\n                        </Flex>\n                    </DrawerHeader>\n\n                    <DrawerBody>\n                        <VStack spacing=\"6\" my=\"16\">\n                            <Button\n                                variant=\"link\"\n                                color={navItemColor}\n                                textDecoration=\"underline\"\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor={currentPage === SlidersPageId ? \"primary.500\" : \"transparent\"}\n                                onClick={() => {\n                                    onClose();\n                                    setTimeout(() => {\n                                        onSectionClick(SlidersPageId);\n                                    }, 250);\n                                }}\n                                data-aos=\"fade\"\n                                data-aos-delay=\"200\"\n                                fontWeight=\"600\"\n                                fontSize=\"2xl\"\n                            >\n                                Highlights\n                            </Button>\n                            <Button\n                                variant=\"link\"\n                                color={navItemColor}\n                                textDecoration=\"underline\"\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor={currentPage === WorkPageId ? \"primary.500\" : \"transparent\"}\n                                onClick={() => {\n                                    onClose();\n                                    setTimeout(() => {\n                                        onSectionClick(WorkPageId);\n                                    }, 250);\n                                }}\n                                data-aos=\"fade\"\n                                data-aos-delay=\"250\"\n                                fontWeight=\"600\"\n                                fontSize=\"2xl\"\n                            >\n                                Work\n                            </Button>\n                            <Button\n                                variant=\"link\"\n                                color={navItemColor}\n                                textDecoration={currentPage === AboutPageId ? \"underline\" : \"none\"}\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor=\"primary.500\"\n                                onClick={() => {\n                                    onClose();\n                                    setTimeout(() => {\n                                        onSectionClick(AboutPageId);\n                                    }, 250);\n                                }}\n                                data-aos=\"fade\"\n                                data-aos-delay=\"300\"\n                                fontWeight=\"600\"\n                                fontSize=\"2xl\"\n                            >\n                                About\n                            </Button>\n                            <Button\n                                variant=\"link\"\n                                color=\"primary.500\"\n                                onClick={onResumeOpen}\n                                data-aos=\"fade\"\n                                data-aos-delay=\"400\"\n                                fontWeight=\"600\"\n                                fontSize=\"2xl\"\n                            >\n                                Resume\n                            </Button>\n                        </VStack>\n                        <Flex justifyContent=\"center\" mt=\"16\">\n                            <Socials delay={100} resume={false} />\n                        </Flex>\n                    </DrawerBody>\n                </DrawerContent>\n            </Drawer>\n        </Box>\n    );\n};\n","import { FC } from \"react\";\n\nimport { Box, Button, Container, Flex, HStack, useColorModeValue } from \"@chakra-ui/react\";\n\nimport { configs } from \"shared/content/Content\";\nimport { LogoType } from \"shared/navbar/logo-type/LogoType\";\nimport { bgDark, bgLight } from \"theme\";\nimport { onResumeOpen } from \"utils/Functions\";\nimport { AboutPageId, SlidersPageId, useScroll, WorkPageId } from \"utils/useScroll\";\nimport { MenuDrawer } from \"./drawer/Drawer\";\nimport { ColorModeButton } from \"shared/color-mode-button/ColorModeButton\";\n\nexport const Navbar: FC = () => {\n    const bg = useColorModeValue(bgLight, bgDark);\n    const navItemColor = useColorModeValue(\"gray.800\", \"white\");\n    const currentPage = useScroll();\n\n    const toSection = (section: string) => {\n        document.getElementById(section)?.scrollIntoView({ behavior: \"smooth\" });\n    };\n\n    return (\n        <Box bg={bg} position=\"fixed\" top=\"0\" w=\"100%\" left=\"50%\" transform=\"translate(-50%)\" zIndex=\"10\">\n            <Container py=\"4\" px=\"4\" data-aos=\"fade-down\" data-aos-duration=\"500\" data-aos-delay=\"100\">\n                <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                    <LogoType info={configs.common.logoType} />\n                    <Flex alignItems=\"center\" display={{ base: \"none\", md: \"flex\" }}>\n                        <HStack spacing=\"8\" mr=\"6\">\n                            <Button\n                                variant=\"link\"\n                                color={navItemColor}\n                                textDecoration=\"underline\"\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor={currentPage === SlidersPageId ? \"primary.500\" : \"transparent\"}\n                                onClick={() => toSection(SlidersPageId)}\n                                data-aos=\"fade\"\n                                data-aos-delay=\"200\"\n                            >\n                                Highlights\n                            </Button>\n                            <Button\n                                variant=\"link\"\n                                color={navItemColor}\n                                textDecoration=\"underline\"\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor={currentPage === WorkPageId ? \"primary.500\" : \"transparent\"}\n                                onClick={() => toSection(WorkPageId)}\n                                data-aos=\"fade\"\n                                data-aos-delay=\"250\"\n                            >\n                                Work\n                            </Button>\n                            <Button\n                                variant=\"link\"\n                                color={navItemColor}\n                                textDecoration={currentPage === AboutPageId ? \"underline\" : \"none\"}\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor=\"primary.500\"\n                                onClick={() => toSection(AboutPageId)}\n                                data-aos=\"fade\"\n                                data-aos-delay=\"300\"\n                            >\n                                About\n                            </Button>\n                            <Button variant=\"link\" onClick={onResumeOpen} data-aos=\"fade\" data-aos-delay=\"400\">\n                                Resume\n                            </Button>\n                        </HStack>\n                        <ColorModeButton />\n                    </Flex>\n\n                    <MenuDrawer\n                        currentPage={currentPage}\n                        onSectionClick={toSection}\n                        display={{ base: \"block\", md: \"none\" }}\n                    />\n                </Flex>\n            </Container>\n        </Box>\n    );\n};\n","import { FC } from \"react\";\n\nimport { Button, HStack, IconButton, Tooltip } from \"@chakra-ui/react\";\n\nimport { configs } from \"shared/content/Content\";\nimport { onResumeOpen, open } from \"utils/Functions\";\nimport { FacebookIcon, GitHubIcon, InstagramIcon, LinkedInIcon, MailIcon, YoutubeIcon } from \"utils/Icons\";\n\nconst LinksToIconMapper: Record<string, JSX.Element> = {\n    linkedin: <LinkedInIcon />,\n    github: <GitHubIcon />,\n    facebook: <FacebookIcon />,\n    instagram: <InstagramIcon />,\n    youtube: <YoutubeIcon />,\n    mail: <MailIcon />,\n};\n\ninterface Props {\n    resume?: boolean;\n    exclude?: Array<string>;\n    delay?: number;\n}\n\nexport const Socials: FC<Props> = ({ resume = true, exclude, delay = 800 }) => {\n    return (\n        <HStack spacing=\"5\">\n            {resume && (\n                <Button data-aos=\"fade\" data-aos-delay={delay} size=\"lg\" borderRadius=\"xl\" mr=\"2\" onClick={onResumeOpen}>\n                    Resume\n                </Button>\n            )}\n            {configs.common.socials.map(\n                (social, idx) =>\n                    !exclude?.includes(social.type) && (\n                        <Tooltip key={social.type} label={social.type} textTransform=\"capitalize\">\n                            <Button\n                                p=\"0\"\n                                aria-label={`${social.type}-button`}\n                                as={IconButton}\n                                variant=\"icon\"\n                                data-aos=\"fade\"\n                                data-aos-delay={idx * 100 + delay}\n                                fontSize={social.type === \"mail\" ? \"24pt\" : \"20pt\"}\n                                icon={LinksToIconMapper[social.type]}\n                                onClick={() => open(social.link)}\n                            />\n                        </Tooltip>\n                    ),\n            )}\n        </HStack>\n    );\n};\n","import { configs } from \"shared/content/Content\";\n\nexport const open = (link: string) => window.open(link, \"_blank\");\n\nexport const onResumeOpen = () => {\n    open(configs.common.resume);\n};\n\nexport const onMailTo = () => {\n    open(\"mailto:\" + configs.common.email);\n};\n"],"names":["LogoType","_ref","info","variantSignature","useBreakpointValue","base","mobile","md","desktop","_jsxs","Box","transition","_hover","cursor","color","children","_jsx","Text","fontSize","lineHeight","fontFamily","mb","role","length","as","ColorModeButton","props","useColorModeValue","colorMode","toggleColorMode","useColorMode","HStack","IconButton","bg","_active","icon","MoonIcon","SunIcon","variant","size","onClick","window","scrollBy","w","h","MenuDrawer","onSectionClick","currentPage","isOpen","onOpen","onClose","useDisclosure","btnRef","useRef","navItemColor","Button","ref","MenuIcon","px","Drawer","placement","autoFocus","DrawerOverlay","DrawerContent","DrawerHeader","Flex","justifyContent","DrawerCloseButton","position","top","right","DrawerBody","VStack","spacing","my","textDecoration","textDecorationThickness","textDecorationColor","SlidersPageId","setTimeout","fontWeight","WorkPageId","AboutPageId","onResumeOpen","mt","Socials","delay","resume","Navbar","bgLight","bgDark","useScroll","toSection","section","_document$getElementB","document","getElementById","scrollIntoView","behavior","left","transform","zIndex","Container","py","alignItems","configs","common","logoType","display","mr","LinksToIconMapper","linkedin","LinkedInIcon","github","GitHubIcon","facebook","FacebookIcon","instagram","InstagramIcon","youtube","YoutubeIcon","mail","MailIcon","exclude","borderRadius","socials","map","social","idx","includes","type","Tooltip","label","textTransform","p","concat","open","link","onMailTo","email"],"sourceRoot":""}